{
  "api/SharpOpenNat.INatDevice.html": {
    "href": "api/SharpOpenNat.INatDevice.html",
    "title": "Interface INatDevice",
    "keywords": "Interface INatDevice Represents a NAT device and provides access to the operation set that allows open (forward) ports, close ports and get the externa (visible) IP address. Namespace: SharpOpenNat Assembly: SharpOpenNat.dll Syntax public interface INatDevice Properties | Edit this page View Source HostEndPoint A local endpoint of NAT device. Declaration IPEndPoint HostEndPoint { get; } Property Value Type Description IPEndPoint | Edit this page View Source LocalAddress A local IP address of client. Declaration IPAddress LocalAddress { get; } Property Value Type Description IPAddress Methods | Edit this page View Source CreatePortMapAsync(Mapping) Creates the port map asynchronous. Declaration Task CreatePortMapAsync(Mapping mapping) Parameters Type Name Description Mapping mapping The Mapping entry. Returns Type Description Task Examples device.CreatePortMapAsync(new Mapping(Protocol.Tcp, 1700, 1600)); Exceptions Type Condition MappingException MappingException | Edit this page View Source DeletePortMapAsync(Mapping) Deletes a mapped port asynchronous. Declaration Task DeletePortMapAsync(Mapping mapping) Parameters Type Name Description Mapping mapping The Mapping entry. Returns Type Description Task Examples device.DeletePortMapAsync(new Mapping(Protocol.Tcp, 1700, 1600)); Exceptions Type Condition MappingException MappingException-class | Edit this page View Source GetAllMappingsAsync() Gets all mappings asynchronous. Declaration Task<IEnumerable<Mapping>> GetAllMappingsAsync() Returns Type Description Task<IEnumerable<Mapping>> The list of all forwarded ports Examples var mappings = await device.GetAllMappingsAsync(); foreach(var mapping in mappings) { Console.WriteLine(mapping) } Exceptions Type Condition MappingException MappingException | Edit this page View Source GetExternalIPAsync() Gets the external (visible) IP address asynchronous. This is the NAT device IP address Declaration Task<IPAddress?> GetExternalIPAsync() Returns Type Description Task<IPAddress> The public IP addrees Examples Console.WriteLine(\"My public IP is: {0}\", await device.GetExternalIPAsync()); Exceptions Type Condition MappingException MappingException | Edit this page View Source GetSpecificMappingAsync(Protocol, int) Gets the specified mapping asynchronous. Declaration Task<Mapping?> GetSpecificMappingAsync(Protocol protocol, int port) Parameters Type Name Description Protocol protocol The protocol. int port The port. Returns Type Description Task<Mapping> The matching mapping"
  },
  "api/SharpOpenNat.INatDiscoverer.html": {
    "href": "api/SharpOpenNat.INatDiscoverer.html",
    "title": "Interface INatDiscoverer",
    "keywords": "Interface INatDiscoverer Discovers NAT device; Inherited Members IDisposable.Dispose() Namespace: SharpOpenNat Assembly: SharpOpenNat.dll Syntax public interface INatDiscoverer : IDisposable Methods | Edit this page View Source DiscoverDeviceAsync(PortMapper, CancellationToken) Discovers and returns a NAT device for the specified type; otherwise a NatDeviceNotFoundException exception is thrown when it is cancelled. Declaration Task<INatDevice> DiscoverDeviceAsync(PortMapper portMapper, CancellationToken cancellationToken = default) Parameters Type Name Description PortMapper portMapper Port mapper protocol; Upnp, Pmp or both CancellationToken cancellationToken Cancellation token for cancelling the discovery process Returns Type Description Task<INatDevice> A NAT device Remarks It allows to specify the NAT type to discover as well as the cancellation token in order. Exceptions Type Condition NatDeviceNotFoundException when no NAT found before cancellation | Edit this page View Source DiscoverDeviceAsync(CancellationToken) Discovers and returns an UPnp or Pmp NAT device; otherwise a NatDeviceNotFoundException exception is thrown after 3 seconds. Declaration Task<INatDevice> DiscoverDeviceAsync(CancellationToken cancellationToken = default) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task<INatDevice> A NAT device Exceptions Type Condition NatDeviceNotFoundException when no NAT found before 3 seconds. | Edit this page View Source DiscoverDevicesAsync(PortMapper, CancellationToken) Discovers and returns all NAT devices for the specified type. If no NAT device is found it returns an empty enumerable Declaration Task<IEnumerable<INatDevice>> DiscoverDevicesAsync(PortMapper portMapper, CancellationToken cancellationToken = default) Parameters Type Name Description PortMapper portMapper Port mapper protocol; Upnp, Pmp or both CancellationToken cancellationToken Cancellation token for cancelling the discovery process Returns Type Description Task<IEnumerable<INatDevice>> All found NAT devices"
  },
  "api/SharpOpenNat.Mapping.html": {
    "href": "api/SharpOpenNat.Mapping.html",
    "title": "Class Mapping",
    "keywords": "Class Mapping Represents a port forwarding entry in the NAT translation table. Inheritance object Mapping Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SharpOpenNat Assembly: SharpOpenNat.dll Syntax public class Mapping Constructors | Edit this page View Source Mapping(Protocol, int, int) Initializes a new instance of the Mapping class. Declaration public Mapping(Protocol protocol, int privatePort, int publicPort) Parameters Type Name Description Protocol protocol The protocol. int privatePort The private port. int publicPort The public port. Remarks This constructor initializes a Permanent mapping. The description by default is \"SharpOpenNat\" | Edit this page View Source Mapping(Protocol, int, int, int, string) Initializes a new instance of the Mapping class. Declaration public Mapping(Protocol protocol, int privatePort, int publicPort, int lifetime, string description) Parameters Type Name Description Protocol protocol The protocol. int privatePort The private port. int publicPort The public port. int lifetime The lifetime in seconds. string description The description. | Edit this page View Source Mapping(Protocol, int, int, string) Initializes a new instance of the Mapping class. Declaration public Mapping(Protocol protocol, int privatePort, int publicPort, string description) Parameters Type Name Description Protocol protocol The protocol. int privatePort The private port. int publicPort The public port. string description The description. Remarks This constructor initializes a Permanent mapping. | Edit this page View Source Mapping(Protocol, IPAddress, int, int, int, string) Initializes a new instance of the Mapping class. Declaration public Mapping(Protocol protocol, IPAddress privateIP, int privatePort, int publicPort, int lifetime, string description) Parameters Type Name Description Protocol protocol The protocol. IPAddress privateIP The private ip. int privatePort The private port. int publicPort The public port. int lifetime The lifetime in seconds. string description The description. Properties | Edit this page View Source Description Gets the mapping's description. It is the value stored in the NewPortMappingDescription parameter. The NewPortMappingDescription parameter is a human readable string that describes the connection. It is used in sorme web interfaces of routers so the user can see which program is using what port. Declaration public string Description { get; } Property Value Type Description string | Edit this page View Source Expiration Gets the expiration. The property value is calculated using Lifetime property. Declaration public DateTime Expiration { get; } Property Value Type Description DateTime | Edit this page View Source Lifetime Gets the lifetime in seconds. The Lifetime parameter tells the router how long the portmapping should be active. Since most programs don't know this in advance, it is often set to 0, which means 'unlimited' or 'permanent'. Declaration public int Lifetime { get; } Property Value Type Description int Remarks All portmappings are release automatically as part of the shutdown process. Permanent portmappings will not be released if the process ends anormally. Since most programs don't know the lifetime in advance, SharpOpenNat renew all the portmappings (except the permanents) before they expires. So, developers have to close explicitly those portmappings they don't want to remain open for the session. | Edit this page View Source LifetimeType Gets the Lifetime of the mapping Declaration public MappingLifetime LifetimeType { get; } Property Value Type Description MappingLifetime | Edit this page View Source PrivateIP Gets the private ip. Declaration public IPAddress PrivateIP { get; } Property Value Type Description IPAddress | Edit this page View Source PrivatePort The PrivatePort parameter specifies the port on a client machine to which all traffic coming in on PublicPort for the protocol specified by Protocol should be forwarded to. Declaration public int PrivatePort { get; } Property Value Type Description int | Edit this page View Source Protocol Gets the protocol. Declaration public Protocol Protocol { get; } Property Value Type Description Protocol | Edit this page View Source PublicIP Gets the public ip. Declaration public IPAddress PublicIP { get; } Property Value Type Description IPAddress | Edit this page View Source PublicPort Gets the external (visible) port number. It is the value stored in the NewExternalPort parameter . The NewExternalPort parameter is used to specify the TCP or UDP port on the WAN side of the router which should be forwarded. Declaration public int PublicPort { get; } Property Value Type Description int Methods | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source IsExpired() Determines whether this instance is expired. Declaration public bool IsExpired() Returns Type Description bool Remarks Permanent mappings never expires. | Edit this page View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString()"
  },
  "api/SharpOpenNat.MappingException.html": {
    "href": "api/SharpOpenNat.MappingException.html",
    "title": "Class MappingException",
    "keywords": "Class MappingException Inheritance object Exception MappingException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SharpOpenNat Assembly: SharpOpenNat.dll Syntax [Serializable] public class MappingException : Exception, ISerializable Constructors | Edit this page View Source MappingException(SerializationInfo, StreamingContext) Initializes a new instance of the Exception class with serialized data. Declaration protected MappingException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition ArgumentNullException info is null. SerializationException The class name is null or HResult is zero (0). Properties | Edit this page View Source ErrorCode Declaration public int ErrorCode { get; } Property Value Type Description int | Edit this page View Source ErrorText Declaration public string? ErrorText { get; } Property Value Type Description string Methods | Edit this page View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException The info parameter is a null reference (Nothing in Visual Basic). Implements ISerializable"
  },
  "api/SharpOpenNat.MappingLifetime.html": {
    "href": "api/SharpOpenNat.MappingLifetime.html",
    "title": "Enum MappingLifetime",
    "keywords": "Enum MappingLifetime The kind of lifetime Namespace: SharpOpenNat Assembly: SharpOpenNat.dll Syntax public enum MappingLifetime Fields Name Description ForcedSession a session lifetime for routers that don't support permanent or manual Manual A lifetime with a predetermined expiration Permanent A permanent mapping Session A mapping that last for the session duration"
  },
  "api/SharpOpenNat.NatDeviceNotFoundException.html": {
    "href": "api/SharpOpenNat.NatDeviceNotFoundException.html",
    "title": "Class NatDeviceNotFoundException",
    "keywords": "Class NatDeviceNotFoundException Inheritance object Exception NatDeviceNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SharpOpenNat Assembly: SharpOpenNat.dll Syntax [Serializable] public class NatDeviceNotFoundException : Exception, ISerializable Constructors | Edit this page View Source NatDeviceNotFoundException() Declaration public NatDeviceNotFoundException() | Edit this page View Source NatDeviceNotFoundException(SerializationInfo, StreamingContext) Initializes a new instance of the Exception class with serialized data. Declaration protected NatDeviceNotFoundException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition ArgumentNullException info is null. SerializationException The class name is null or HResult is zero (0). | Edit this page View Source NatDeviceNotFoundException(string) Declaration public NatDeviceNotFoundException(string message) Parameters Type Name Description string message | Edit this page View Source NatDeviceNotFoundException(string, Exception) Declaration public NatDeviceNotFoundException(string message, Exception innerException) Parameters Type Name Description string message Exception innerException Implements ISerializable"
  },
  "api/SharpOpenNat.OpenNat.html": {
    "href": "api/SharpOpenNat.OpenNat.html",
    "title": "Class OpenNat",
    "keywords": "Class OpenNat Inheritance object OpenNat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpOpenNat Assembly: SharpOpenNat.dll Syntax public static class OpenNat Fields | Edit this page View Source TraceSource The TraceSource instance used for debugging and Troubleshooting. Declaration public static readonly TraceSource TraceSource Field Value Type Description TraceSource Remarks At least one trace listener has to be added to the Listeners collection if a trace is required; if no listener is added there will no be tracing to analyse. Examples NatUtility.TraceSource.Switch.Level = SourceLevels.Verbose; NatUtility.TraceSource.Listeners.Add(new ConsoleListener()); Properties | Edit this page View Source Discoverer Lazy loaded singleton implementation of INatDiscoverer Declaration public static INatDiscoverer Discoverer { get; } Property Value Type Description INatDiscoverer"
  },
  "api/SharpOpenNat.PortMapper.html": {
    "href": "api/SharpOpenNat.PortMapper.html",
    "title": "Enum PortMapper",
    "keywords": "Enum PortMapper Protocol that should be used for searching a NAT device. Namespace: SharpOpenNat Assembly: SharpOpenNat.dll Syntax [Flags] public enum PortMapper Fields Name Description Pmp Use only Port Mapping Protocol Upnp Use only Universal Plug and Play"
  },
  "api/SharpOpenNat.Protocol.html": {
    "href": "api/SharpOpenNat.Protocol.html",
    "title": "Enum Protocol",
    "keywords": "Enum Protocol Protocol to allow/disallow Namespace: SharpOpenNat Assembly: SharpOpenNat.dll Syntax public enum Protocol Fields Name Description Tcp Transport Control Protocol Udp Datagram Protocol"
  },
  "api/SharpOpenNat.html": {
    "href": "api/SharpOpenNat.html",
    "title": "Namespace SharpOpenNat",
    "keywords": "Namespace SharpOpenNat Classes Mapping Represents a port forwarding entry in the NAT translation table. MappingException NatDeviceNotFoundException OpenNat Interfaces INatDevice Represents a NAT device and provides access to the operation set that allows open (forward) ports, close ports and get the externa (visible) IP address. INatDiscoverer Discovers NAT device; Enums MappingLifetime The kind of lifetime PortMapper Protocol that should be used for searching a NAT device. Protocol Protocol to allow/disallow"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "SharpOpenNat",
    "keywords": "SharpOpenNat This is the documentation for SharpOpenNat."
  },
  "index.html": {
    "href": "index.html",
    "title": "SharpOpenNat",
    "keywords": "SharpOpenNat SharpOpenNat is a lightweight and easy-to-use class library to allow port forwarding in NAT devices (Network Address Translator) that support Universal Plug and Play (UPNP) and/or Port Mapping Protocol (PMP)."
  }
}